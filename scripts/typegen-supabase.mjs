#!/usr/bin/env node

/**
 * Generate TypeScript types from Supabase database schema
 * 
 * This script uses the Supabase CLI to generate TypeScript types
 * from the current database schema and saves them to the types package.
 */

import { execSync } from 'child_process'
import { writeFileSync, readFileSync, existsSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Paths
const projectRoot = join(__dirname, '..')
const typesDir = join(projectRoot, 'packages/types/src/generated')
const outputFile = join(typesDir, 'supabase.ts')

/**
 * Check if Supabase CLI is available
 */
function checkSupabaseCLI() {
  try {
    execSync('supabase --version', { stdio: 'pipe' })
    return true
  } catch (error) {
    console.error('❌ Supabase CLI not found. Please install it first:')
    console.error('   npm install -g supabase')
    console.error('   or visit: https://supabase.com/docs/guides/cli')
    return false
  }
}

/**
 * Check if we're in a Supabase project
 */
function checkSupabaseProject() {
  const configPath = join(projectRoot, 'supabase/config.toml')
  if (!existsSync(configPath)) {
    console.error('❌ Not in a Supabase project. Run `supabase init` first.')
    return false
  }
  return true
}

/**
 * Generate types using Supabase CLI
 */
function generateTypes() {
  console.log('🔧 Generating TypeScript types from Supabase schema...')
  
  try {
    // Generate types using Supabase CLI
    const command = `supabase gen types typescript --local > "${outputFile}"`
    execSync(command, { 
      cwd: projectRoot,
      stdio: 'pipe'
    })
    
    console.log(`✅ Types generated successfully: ${outputFile}`)
    return true
    
  } catch (error) {
    console.error('❌ Failed to generate types:', error.message)
    
    // Try to provide helpful error messages
    if (error.message.includes('Could not connect to local database')) {
      console.error('💡 Make sure Supabase is running locally:')
      console.error('   npm run db:start')
    } else if (error.message.includes('No such file or directory')) {
      console.error('💡 Make sure you are in the project root directory')
    }
    
    return false
  }
}

/**
 * Post-process the generated types file
 */
function postProcessTypes() {
  console.log('🔄 Post-processing generated types...')
  
  try {
    let content = readFileSync(outputFile, 'utf8')
    
    // Add header comment
    const header = `/**
 * @fileoverview Auto-generated Supabase types
 * 
 * This file is generated by the Supabase CLI and should not be edited manually.
 * To regenerate these types, run: npm run typegen:supabase
 * 
 * Generated at: ${new Date().toISOString()}
 */

`
    
    content = header + content
    
    // Write the updated content
    writeFileSync(outputFile, content, 'utf8')
    
    console.log('✅ Types post-processed successfully')
    return true
    
  } catch (error) {
    console.error('❌ Failed to post-process types:', error.message)
    return false
  }
}

/**
 * Update the types package index to re-export generated types
 */
function updateTypesIndex() {
  console.log('🔄 Updating types package exports...')
  
  const indexFile = join(projectRoot, 'packages/types/src/index.ts')
  
  try {
    let content = `/**
 * @fileoverview Main entry point for shared types
 * 
 * This package provides:
 * - Auto-generated Supabase database types
 * - Common utility types
 * - Database helper types and utilities
 */

// Export all generated Supabase types (this is the single source of truth)
export * from './generated/supabase'

// Export custom utility types
export * from './common'

// Export database helper types and utilities
export * from './helpers'
`
    
    writeFileSync(indexFile, content, 'utf8')
    console.log('✅ Types index updated successfully')
    return true
    
  } catch (error) {
    console.error('❌ Failed to update types index:', error.message)
    return false
  }
}

/**
 * Build the types package after generation
 */
function buildTypesPackage() {
  console.log('🔨 Building types package...')
  
  try {
    execSync('npm run build', {
      cwd: join(projectRoot, 'packages/types'),
      stdio: 'inherit'
    })
    
    console.log('✅ Types package built successfully')
    return true
    
  } catch (error) {
    console.error('❌ Failed to build types package:', error.message)
    return false
  }
}

/**
 * Main execution
 */
async function main() {
  console.log('🚀 Starting Supabase type generation...\n')
  
  // Pre-flight checks
  if (!checkSupabaseCLI()) {
    process.exit(1)
  }
  
  if (!checkSupabaseProject()) {
    process.exit(1)
  }
  
  // Generate types
  if (!generateTypes()) {
    process.exit(1)
  }
  
  // Post-process
  if (!postProcessTypes()) {
    process.exit(1)
  }
  
  // Update exports
  if (!updateTypesIndex()) {
    process.exit(1)
  }
  
  // Build the package
  if (!buildTypesPackage()) {
    process.exit(1)
  }
  
  console.log('\n🎉 Type generation completed successfully!')
  console.log('💡 The generated types are now available in your packages/types package')
  console.log('💡 You can import them using: import type { Database } from "@repo/types"')
}

// Run the script
main().catch(console.error)
